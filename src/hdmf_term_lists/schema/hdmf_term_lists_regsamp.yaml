id: https://w3id.org/hdmf-dev/hdmf-term-lists
name: hdmf-term-lists
title: hdmf-term-lists
description: |-
  Example LinkML schema to demonstrate storage of term lists.
license: MIT
see_also:
  - https://hdmf-dev.github.io/hdmf-term-lists

prefixes:
  hdmf_term_lists: https://w3id.org/hdmf-dev/hdmf-term-lists/
  linkml: https://w3id.org/linkml/
  biolink: https://w3id.org/biolink/
  schema: http://schema.org/
  PATO: http://purl.obolibrary.org/obo/PATO_
  example: https://example.org/
  RO: http://purl.obolibrary.org/obo/RO_
  NCBITaxon: http://purl.obolibrary.org/obo/NCBITaxon_
  obo: http://purl.obolibrary.org/obo/

  # can you specify versions? TODO

default_curi_maps:
  - semweb_context  # will load a bunch of common semantic web urls including rdfs
  # see https://github.com/prefixcommons/biocontext/blob/master/registry/semweb_context.yaml
default_prefix: hdmf_term_lists
default_range: string

imports:
  - linkml:types

slots:
  axis0:
    aliases:
    - x
    range: OneDimensionalSeries  # abstract
    rank: 0
    required: true
    inlined: true
    inlined_as_list: true
  axis1:
    aliases:
    - y
    range: OneDimensionalSeries  # abstract
    rank: 1
    required: true
    inlined: true
    inlined_as_list: true
  values:
    # one big long list that should be interpreted as a 2d array
    # TODO serialize as a list of lists.
    # there is currently no validation that the length of this list = len(axis0) * len(axis1)
    range: Any  # temp
    required: true
    multivalued: true

classes:

  Any:
    class_uri: linkml:Any

  OneDimensionalSeries:
    attributes:
      name:  # the row label
        key: true  # unique when nested (unlike identifier, which is a global identifier)

  IrregularlySampledOneDimensionalSeries:
    is_a: OneDimensionalSeries
    attributes:
      values:
        range: Any  # temp
        multivalued: true
        required: true

  RegularlySampledOneDimensionalSeries:
    is_a: OneDimensionalSeries
    attributes:
      sampling_rate:
        range: float
        required: true
      offset:
        range: float
        required: true
      length:  # must be defined when it cannot be inferred
        range: integer
      values:
        range: float
        multivalued: true
        equals_expression: "{array_index} * {sampling_rate} + {offset}"  # TODO define array_index

  TwoDimensionalArray:
    attributes:
      axis0:
        aliases:
        - x
        range: OneDimensionalSeries
        rank: 0
        required: true
        inlined: true
        inlined_as_list: true
      axis1:
        aliases:
        - y
        range: OneDimensionalSeries
        rank: 1
        required: true
        inlined: true
        inlined_as_list: true
      values:
        # one big long list that should be interpreted as a 2d array
        # TODO serialize as a list of lists.
        # there is currently no validation that the length of this list = len(axis0) * len(axis1)
        range: Any  # temp
        required: true
        multivalued: true

  TimestampSeriesMixin:


  IrregularlySampledTimestampSeries:
    is_a: IrregularlySampledOneDimensionalSeries
    mixins:
      - TimestampSeriesMixin
    slot_usage:
      values:
        unit:
          ucum_code: s

  RegularlySampledTimestampSeries:  # like a lazy list
    is_a: RegularlySampledOneDimensionalSeries
    mixins:
      - TimestampSeriesMixin
    slot_usage:
      values:
        unit:
          ucum_code: s

  Electrode:
    attributes:
      name:
        range: string
      impedance:
        range: float
        unit:
          ucum_code: Ohm

  ElectrodeSeries:
    is_a: IrregularlySampledOneDimensionalSeries
    slot_usage:
      values:
        range: Electrode

  ElectricalArray:
    tree_root: true
    is_a: TwoDimensionalArray
    slot_usage:
      axis0:
        role: time
        range: TimestampSeriesMixin  # abstract
      axis1:
        role: electrode
        range: ElectrodeSeries
      values:
        range: float
        unit:
          ucum_code: V

  IrregularlySampledElectricalArray:
    is_a: ElectricalArray
    slot_usage:
      axis0:
        range: IrregularlySampledTimestampSeries
    slots:
      - axis0
      - axis1
      - values

  RegularlySampledElectricalArray:
    is_a: ElectricalArray
    slot_usage:
      axis0:
        range: RegularlySampledTimestampSeries


# TODO:
# - explore putting a n-dimensional array into the metamodel (on the order of months) (may not be necessary)
# - how to encode regularly sampled vs irregularly sampled timestamps
# - annotate the schema with ontology terms -- for a fuller ElectricalArray example
# - embed this in a full end-to-end example -- experimental metadata plus data
# - explore how to store clusters of these data
# - does CORAL support inheritance/extension of data types?
# - try to serialize data differently
